/*
# The name of the tool must be a valid Python identifier (e.g., no spaces).
# This field is mandatory, and will be used as the name of a Python function.
name: lookup_flight_info

# A description for the function bound to this tool.
# This field is mandatory, and will be used in the docstring of a Python function.
description: >
    Find flight routes between two airports with airline and aircraft information.

# The inputs used to resolve the named parameters in the SQL++ query below.
# Inputs are described using a JSON object (given as a string) OR a YAML object that follows the JSON schema standard.
# This field is mandatory, and will be used to build a Pydantic model.
# See https://json-schema.org/learn/getting-started-step-by-step for more info.
input:
    type: object
    properties:
      source_airport:
        type: string
        description: "IATA code for departure airport (e.g., SFO, JFK, LAX)"
      destination_airport:
        type: string
        description: "IATA code for arrival airport (e.g., LAX, JFK, ORD)"
    required: ["source_airport", "destination_airport"]

# The outputs used describe the structure of the SQL++ query result.
# Outputs are described using a JSON object (given as a string) OR a YAML object that follows the JSON schema standard.
# This field is mandatory, and will be used to build a Pydantic model.
output:
    type: array
    items:
      type: object
      properties:
        airline:
          type: string
          description: "Airline code"
        source_airport:
          type: string
          description: "Departure airport code"
        destination_airport:
          type: string
          description: "Arrival airport code"
        equipment:
          type: string
          description: "Aircraft type"
        distance:
          type: number
          description: "Flight distance in miles"
        departure_city:
          type: string
          description: "Departure city name"
        arrival_city:
          type: string
          description: "Arrival city name"
        departure_airport_name:
          type: string
          description: "Full departure airport name"
        arrival_airport_name:
          type: string
          description: "Full arrival airport name"

# The "secrets" field defines search keys that will be used to query a "secrets" manager.
# Note that these values are NOT the secrets themselves, rather they are used to lookup secrets.
# Users must specify these variables at runtime as environment variables OR explicitly through a Catalog instance.
secrets:
    # All Couchbase tools (e.g., semantic search, SQL++) must specify conn_string, username, and password.
    - couchbase:
        conn_string: CB_CONN_STRING
        username: CB_USERNAME
        password: CB_PASSWORD
        # certificate: CB_CERTIFICATE
*/

FROM
    `travel-sample`.inventory.route r
    LEFT JOIN `travel-sample`.inventory.airport a1 ON r.sourceairport = a1.faa
    LEFT JOIN `travel-sample`.inventory.airport a2 ON r.destinationairport = a2.faa
WHERE
    -- Parameters specified in the input field of the tool metadata above correspond to named parameters here.
    -- The '$' syntax is used to denote a named parameter.
    -- See https://docs.couchbase.com/server/current/n1ql/n1ql-rest-api/exnamed.html for more details.
    r.sourceairport = $source_airport AND
    r.destinationairport = $destination_airport
SELECT VALUE {
    "airline"                 : r.airline,
    "source_airport"          : r.sourceairport,
    "destination_airport"     : r.destinationairport,
    "equipment"               : r.equipment,
    "distance"                : r.distance,
    "departure_city"          : a1.city,
    "arrival_city"            : a2.city,
    "departure_airport_name"  : a1.airportname,
    "arrival_airport_name"    : a2.airportname
}
LIMIT
    10;