
# USER INPUT REQUIRED
# Paste your credentials and desired resource names here.

import os

# --- Credentials (Paste from your Capella Account) ---
CAPELLA_API_SECRET = "WTQ2SGUyM0RWSmpWUEgxdUZZSUJTdnlPTThPZmNVSzA6RHN3YTZESjV2JEJhM3JheEwkaE5XMnlhV2JHK1NWa35LbiFoXjRFdGFwP2N5bUN5eWpaRzY4OD8hcEV0eW5aIw=="
ORGANIZATION_ID = "7f838922-096f-48bd-acd9-a6087f707418"

# --- Configuration for this Tutorial ---
# The notebook will automatically find or create a project with this name.
PROJECT_NAME = "Agent-Hub-Project"
CLUSTER_NAME = "agent-hub-flight-cluster"
DB_USERNAME = "agent_app_user"
MODEL_NAME = "nvidia/nv-embedqa-e5-v5"


import httpx
import time

# Use the base URL from the OpenAPI specification
API_BASE_URL = "https://cloudapi.cloud.couchbase.com"
HEADERS = {
    "Authorization": f"Bearer {CAPELLA_API_SECRET}",
    "Content-Type": "application/json"
}

# --- API Helper Functions ---

def wait_for_resource_ready(check_url: str, resource_type: str, timeout_seconds: int = 900):
    """Polls a Capella endpoint until the resource is in a 'healthy' or 'ready' state."""
    start_time = time.time()
    print(f"   Waiting for {resource_type} to become ready... (this can take several minutes)")
    while time.time() - start_time < timeout_seconds:
        try:
            with httpx.Client(headers=HEADERS, timeout=30) as client:
                response = client.get(f"{API_BASE_URL}{check_url}")
            if response.status_code == 200:
                data = response.json()
                state = data.get("currentState", data.get("status", "")).lower()
                if "healthy" in state or "ready" in state or "complete" in state:
                    print(f"✅ {resource_type} is ready!")
                    return data
            time.sleep(20)
        except Exception as e:
            print(f"   ... still waiting (error polling: {e})")
            time.sleep(20)
    raise Exception(f"Timeout: {resource_type} was not ready within {timeout_seconds} seconds.")

def get_or_create_project(org_id, project_name):
    """Finds a project by name or creates it if it doesn't exist."""
    list_endpoint = f"/v4/organizations/{org_id}/projects"
    
    print(f"   Searching for project named '{project_name}'...")
    with httpx.Client(headers=HEADERS, timeout=30) as client:
        list_response = client.get(f"{API_BASE_URL}{list_endpoint}")
    
    if list_response.status_code == 200:
        for project in list_response.json().get('data', []):
            if project.get('name') == project_name:
                project_id = project.get('id')
                print(f"✅ Found existing project. Project ID: {project_id}")
                return project_id
    
    print(f"   Project not found. Creating a new project named '{project_name}'...")
    create_endpoint = f"/v4/organizations/{org_id}/projects"
    payload = {"name": project_name, "description": "Project for Agent Application Hub samples."}
    with httpx.Client(headers=HEADERS, timeout=30) as client:
        create_response = client.post(f"{API_BASE_URL}{create_endpoint}", json=payload)
    
    if create_response.status_code == 201:
        project_id = create_response.json().get("id")
        print(f"✅ Successfully created new project. Project ID: {project_id}")
        return project_id
    else:
        raise Exception(f"Failed to create project. Status: {create_response.status_code}, Response: {create_response.text}")

def create_free_tier_cluster(org_id, proj_id, name):
    """Creates a new free tier cluster using the Management API."""
    endpoint = f"/v4/organizations/{org_id}/projects/{proj_id}/clusters/freeTier"
    payload = {
        "name": name,
        "cloudProvider": { "type": "aws", "region": "us-east-2" },
        "description": "Cluster for Agent Application Hub Tutorial"
    }
    with httpx.Client(headers=HEADERS, timeout=30) as client:
        response = client.post(f"{API_BASE_URL}{endpoint}", json=payload)
    if response.status_code == 202:
        cluster_id = response.json().get("id")
        print(f"   Cluster creation job submitted. Cluster ID: {cluster_id}")
        return cluster_id
    elif response.status_code == 422 and "limited to provisioning one cluster" in response.text:
        print("   A free tier cluster already exists. Attempting to find it...")
        clusters_endpoint = f"/v4/organizations/{org_id}/projects/{proj_id}/clusters"
        with httpx.Client(headers=HEADERS, timeout=30) as client:
            list_response = client.get(f"{API_BASE_URL}{clusters_endpoint}")
        if list_response.status_code == 200:
            for cluster in list_response.json().get('data', []):
                 if cluster.get('name') == name:
                    print(f"   Found existing cluster with name '{name}'. Using it.")
                    return cluster.get('id')
        raise Exception(f"Failed to create or find free tier cluster. Response: {response.text}")
    else:
        raise Exception(f"Failed to create cluster. Status: {response.status_code}, Response: {response.text}")

def load_travel_sample(org_id, proj_id, cluster_id):
    """Loads the travel-sample bucket into the specified cluster."""
    endpoint = f"/v4/organizations/{org_id}/projects/{proj_id}/clusters/{cluster_id}/sampleBuckets"
    payload = { "name": "travel-sample" }
    with httpx.Client(headers=HEADERS, timeout=60) as client:
        response = client.post(f"{API_BASE_URL}{endpoint}", json=payload)
    if response.status_code in [201, 422]:
        print(f"✅ `travel-sample` bucket load command accepted.")
        bucket_check_url = f"/v4/organizations/{org_id}/projects/{proj_id}/clusters/{cluster_id}/buckets"
        start_time = time.time()
        while time.time() - start_time < 300:
             with httpx.Client(headers=HEADERS, timeout=30) as client:
                bucket_list_response = client.get(f"{API_BASE_URL}{bucket_check_url}")
             if any(b.get('name') == 'travel-sample' for b in bucket_list_response.json().get('data',[])):
                 print("✅ `travel-sample` bucket is ready.")
                 return
             time.sleep(10)
        raise Exception("Timeout waiting for travel-sample bucket to become available.")
    else:
        raise Exception(f"Failed to load travel-sample. Status: {response.status_code}, Response: {response.text}")

def create_db_user(org_id, proj_id, cluster_id, username):
    """Creates a database user with broad access for the tutorial."""
    endpoint = f"/v4/organizations/{org_id}/projects/{proj_id}/clusters/{cluster_id}/users"
    payload = {
        "name": username,
        "access": [{"privileges": ["data_reader", "data_writer"]}]
    }
    with httpx.Client(headers=HEADERS, timeout=30) as client:
        response = client.post(f"{API_BASE_URL}{endpoint}", json=payload)
    if response.status_code == 201:
        data = response.json()
        print(f"   Database user '{username}' created successfully.")
        return data['password']
    else:
        raise Exception(f"Failed to create DB user. Status: {response.status_code}, Response: {response.text}")

def create_ai_model(org_id, name):
    """Deploys a new embedding model using the Management API."""
    endpoint = f"/v4/organizations/{org_id}/aiServices/models"
    payload = {
        "name": name,
        "catalogModelName": "nvidia/nv-embedqa-e5-v5",
        "cloudConfig": {
            "provider": "aws",
            "region": "us-east-1",
            "availability": "multiAz",
            "compute": { "cpu": 4, "ram": 16 },
            "numOfNodes": 2
        }
    }
    with httpx.Client(headers=HEADERS, timeout=60) as client:
        response = client.post(f"{API_BASE_URL}{endpoint}", json=payload)
    if response.status_code == 202:
        model_id = response.json().get("id")
        print(f"   AI model deployment job submitted. Model ID: {model_id}")
        return model_id
    else:
        raise Exception(f"Failed to create AI model. Status: {response.status_code}, Response: {response.text}")
    
    
print("--- 🚀 Starting Automated Capella Environment Setup ---")

try:
    # 1. Get or Create Project
    print("\n[1/6] Finding or Creating Capella Project...")
    project_id = get_or_create_project(ORGANIZATION_ID, PROJECT_NAME)

    # 2. Create and Wait for Cluster
    print("\n[2/6] Deploying Capella Free Tier Cluster...")
    cluster_id = create_free_tier_cluster(ORGANIZATION_ID, project_id, CLUSTER_NAME)
    cluster_check_url = f"/v4/organizations/{ORGANIZATION_ID}/projects/{project_id}/clusters/{cluster_id}"
    cluster_details = wait_for_resource_ready(cluster_check_url, "Cluster")
    cluster_conn_string = cluster_details.get("connectionString")

    # 3. Load Sample Data
    print("\n[3/6] Loading 'travel-sample' Dataset...")
    load_travel_sample(ORGANIZATION_ID, project_id, cluster_id)

    # 4. Create Database User
    print("\n[4/6] Creating Database Credentials...")
    db_password = create_db_user(ORGANIZATION_ID, project_id, cluster_id, DB_USERNAME)

    # 5. Deploy AI Model
    print("\n[5/6] Deploying AI Embedding Model...")
    model_id = create_ai_model(ORGANIZATION_ID, MODEL_NAME)
    model_check_url = f"/v4/organizations/{ORGANIZATION_ID}/aiServices/models/{model_id}"
    model_details = wait_for_resource_ready(model_check_url, "AI Model")
    model_endpoint = model_details.get("connectionString")
    
    # 6. Set Environment Variables for the Notebook
    print("\n[6/6] Configuring Environment for this Notebook Session...")
    os.environ["CB_CONN_STRING"] = "couchbases://" + cluster_conn_string.replace("cb.","") + "?ssl=no_verify"
    os.environ["CB_USERNAME"] = DB_USERNAME
    os.environ["CB_PASSWORD"] = db_password
    os.environ["CB_BUCKET"] = "travel-sample"
    
    os.environ["CAPELLA_API_ENDPOINT"] = model_endpoint
    os.environ["CAPELLA_API_EMBEDDINGS_KEY"] = CAPELLA_API_SECRET
    os.environ["CAPELLA_API_LLM_KEY"] = CAPELLA_API_SECRET
    
    print("\n--- ✅ SETUP COMPLETE! ---")
    print("All resources have been deployed and configured.")
    print("You can now proceed to run the rest of the cells in the notebook.")

except Exception as e:
    print("\n--- ❌ SETUP FAILED ---")
    print(f"An error occurred during the automated setup: {e}")
    print("Please check your credentials and permissions, then try running this cell again.")
    
    
print("the environment variables are:")
print(os.environ["CB_CONN_STRING"])
print(os.environ["CB_USERNAME"])
print(os.environ["CB_PASSWORD"])
print(os.environ["CB_BUCKET"])
print(os.environ["CAPELLA_API_ENDPOINT"])
print(os.environ["CAPELLA_API_EMBEDDINGS_KEY"])
print(os.environ["CAPELLA_API_LLM_KEY"])